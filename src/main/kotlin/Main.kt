
/*
    Try Kotlin online:
    https://play.kotlinlang.org
* */

// Ref: https://www.tutorialspoint.com/kotlin
// https://play.kotlinlang.org/byExample/01_introduction/01_Hello%20world
// https://www.davideaversa.it/blog/kotlin-development-in-vscode/
// https://developer.ibm.com/tutorials/learn-kotlin-6/
/*
    Following are the different scenarios where Kotlin compiler will work differently.
    Compile Kotlin into bytecode which can run on JVM. This bytecode is exactly equal to the byte code generated by the Java .class file.
    Whenever Kotlin targets JavaScript, the Kotlin compiler converts the .kt file into ES5.1 and generates a compatible code for JavaScript.
    Kotlin compiler is capable of creating platform basis compatible codes via LLVM.
    Kotlin Multiplatform Mobile (KMM) is used to create multiplatform mobile applications with code shared between Android and iOS.

 */

/*
   Semicolon: optional
   ___________________

   new keyword: not used
   _____________________


   Functions (= Java methods)
   ___________________________

   Defined with fun keyword:

   fun foo(pamam1: Int, param2: String): Unit {
      // Unit as the return type means "void"
   }
   Entry point for a kotlin application: main function

   Example:

   fun distance(point: Punto2D) = sqrt((point.x - this.x).pow(2) + (point.y - this.y).pow(2))

   Lambda Functions
   ________________

   Example:
   val sum = { x: Int, y: Int -> x + y }

   The last expression inside the body is considered as the return statement.

   Overriding
   __________
   Use override keyword in front of the function:
   override fun pippo(): Int { ... }

   Exceptions
   __________
   Like Java (throw, try, catch..).
   Exception subclasses are the same as in Java.

   Null Safety
   ___________

   As everything is an object in Kotlin (even Java primitive types),
   everything can be null.
   The way to specify that a variable can be null is by adding
   a question mark to the end of its type:
   val a: Int? = null

   Using the safe call operator (?.), the following line will
   only be executed if the variable is not null.
   Otherwise, it will do nothing:
   val myString = a?.toString()

   We can even provide an alternative for the null case using
   the Elvis operator (?:):
   val myString = a?.toString() ?: ""

   Non-null safety (!!)
   ____________________
   The !! operator converts a nullable type to a non-null type.
   val nullableName: String? = null
   nullableName!!.toUpperCase() // Results in NullPointerException

   Throws NullPointerException if object a is null:
   val myString = a!!.toString()

   Variables
   _________
   var is a variable (mutable)
   val is a constant

   Data Type:
   Byte, Short (16 bit), Int, Long, Float, Double, Boolean

   Note that everything is an object in Kotlin (even Java primitive types)!


 */
import java.time.LocalDate
// Simple empty class
class Pippo
// Class with primary constructor (generate automatically attributes and getters)
// var attribute: cannot be modified (no setter)
class Person(val givenName: String, val familyName: String, val dateOfBirth: LocalDate)
// you can put extra code for constructor inside init{} block

// a data class is a class for holding data: it has automatically generated methods
// (toString, copy, equals, componentN(), ..)
data class User(val name: String, val age: Int)

// var attribute: generate getter and setter
class Animal(type: String, var breed: String) {

    init {  // init (optional) performs additional instructions when primary constructor in called
        if(breed.equals(""))
            breed = "unknown"
    }
    // getter and setter for field in primary constructor
    var type: String = type  // type is public by default
    get() = field
    set(value) {
        field = value
    }

    // Define additional attribute with getter and setter:
    private var age: Int = 0  // if private, you can't use getter and setter..
    set(value) {  // setter for age
        if(value > 0)
            field = value
        else
            field = 0
    }
    // Secondary constructor
    constructor(type : String , breed :String, age :Int):this(type,breed) {
        if(age > 0)
            this.age = age
    }

}

fun main(args: Array<String>) {
    println("Hello World!")

    // Variable declaration examples:
    var msg: String = "Hello, World!" // defining a variable
    var msgAlt = "CheSuperSbomballo!"  // type inference
    var bool: Boolean = true  // a Boolean
    var boolNull: Boolean? = null  // a Boolean that can have null value

    // Printing output examples:
    println("$msg")  // print variable with $ sign
    println("message: "+msg)  // print variable in Java-like style

    // Null Safety example:
    var myString: String? = "Pippo" // declare a string that can be null
    myString = boolNull?.toString() // assign a value only if it's not null
    println("myString is: "+myString)

    // Elvis operator example:
    myString = boolNull?.toString() ?: "Boolean was null"  // assign the boolean value if it's non null, otherwise assign the other string
    println("myString is: "+myString)


    // Data types:
    val x: Int = 10000    // Integer (val = const)
    println("Int value is: "+x)

    val y: Long = x.toLong()   // Casting

    val numbers: IntArray = intArrayOf(1, 2, 3, 4, 5)   // Array (val = const)
    println("Value at 3rd position : " + numbers[2])
    numbers.set(2, 15)  // set a value
    // numbers.set(5, 25)  // Error! Out of bounds
    println("Value at 3rd position : " + numbers[2])

    // Classes:

    val u = User("Pippo", 18)
    println("User Class Example: "+u.name+" "+u.age);
    // u.name = "Pluto";  // Error: val cannot be reassigned


    val p = Person("Joe", "Doe", LocalDate.now())

    println(p.dateOfBirth.toString()+" "+p.givenName+" "+p.familyName)

    val animal = Animal("dog", "")

    println("Breed: "+animal.breed)
    animal.type = "monkey";  // setter
    // animal.age = 5;  // Error! age attribute is private

    // Try adding program arguments via Run/Debug configuration.
    // Learn more about running applications: https://www.jetbrains.com/help/idea/running-applications.html.
    println("Program arguments: ${args.joinToString()}")

    // Input
    println("write something: ")
    var input = readLine()
    println("input: "+input)
    println("input to Int: "+input?.toInt())  // possibly throws NumberFormatException
}